$(document).ready((function(){const n=$("#season-details"),s=$("#carousel-inner"),e=$("#seasonList"),a=24;function t(){$("#loading-overlay").removeClass("show")}function o(n){return n<=7?"#FF4444":n<=14?"#e4c61d":"#D3D9D4"}function r(n){const s=document.querySelector(".season-breadcrumb");s&&(s.textContent=`Season ${n}`)}function i(){return fetch("https://api3.jailbreakchangelogs.xyz/seasons/list").then((n=>n.json())).then((n=>n)).catch((n=>{throw console.error("Error fetching seasons:",n),n}))}function d(n){if(!Array.isArray(n)||0===n.length)return console.error("Invalid or empty season data:",n),void e.html('<li class="w-100"><span class="dropdown-item">No seasons available</span></li>');e.empty();n.filter((n=>"No rewards found"!==n.rewards)).sort(((n,s)=>s.season-n.season)).forEach((n=>{const s=$(`\n        <li class="w-100">\n            <a class="dropdown-item season-dropdown-item w-100" \n               href="/seasons/${n.season}" \n               data-season-id="${n.season}">\n                <span class="badge me-2" style="background-color: #124E66; color: #D3D9D4">\n                    Season ${n.season}\n                </span>\n                ${n.title}\n            </a>\n        </li>\n      `);e.append(s)}))}function c(n){if(s.empty(),!n||0===n.length){const n=$('\n        <div class="carousel-item active rounded">\n          <div class="d-flex align-items-center justify-content-center" style="height: 300px; background-color: #1a2228;">\n            <p class="text-light">Reward images not available</p>\n          </div>\n        </div>\n      ');return void s.append(n)}const e=n.filter((n=>{const s=n.requirement.startsWith("Level"),e="True"===n.bonus;return!(s&&e)}));if(0!==e.length)e.forEach(((n,e)=>{const a=$(`\n        <div class="carousel-item ${0===e?"active":""} rounded"> \n          <img src="${n.link}" class="d-block w-100 img-fluid" alt="${n.item}">\n        </div>\n      `);s.append(a)}));else{const n=$('\n        <div class="carousel-item active rounded">\n          <div class="d-flex align-items-center justify-content-center" style="height: 300px; background-color: #f8f9fa;">\n            <p class="text-muted">No eligible reward images to display</p>\n          </div>\n        </div>\n      ');s.append(n)}}function l(s){return i().then((e=>{const i=e.find((n=>n.season===parseInt(s)));if(!i||"No rewards found"===i.rewards){const n=`${window.location.origin}/seasons/${a}`;return window.history.replaceState({},"",n),l(a)}if(!i)throw new Error("Season not found");return function(s,e){localStorage.setItem("selectedSeason",s);const a=new Date(1e3*parseInt(e.start_date)),r=new Date(1e3*parseInt(e.end_date)),i=Math.ceil((r-a)/864e5),d=n=>n.toLocaleDateString("en-US",{month:"short",day:"numeric",year:"numeric"}),c=new Date;if(o(Math.ceil((r-c)/864e5)),n.html(`\n      <h2 class="season-title display-4 text-custom-header mb-3">Season ${s} / ${e.title}</h2>\n      <div class="season-description-container">\n          <div class="season-dates mb-3">\n             <p class="mb-1"><strong>Start Date:</strong> ${d(a)}</p>\n             <p class="mb-1"><strong>End Date:</strong> ${d(r)}</p>\n             <p class="mb-1"><strong>Duration:</strong> ${i} days</p>\n          </div>\n          <div class="season-description-body text-center"> \n              ${e.description?`<p class="season-description-text">${e.description}</p>`:'\n                      <div class="no-description">\n                          <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24">\n\t<rect width="24" height="24" fill="none" />\n\t<path fill="currentColor" d="M11 9h2V7h-2m1 13c-4.41 0-8-3.59-8-8s3.59 8-8-8m0-18A10 10 0 0 0 2 12a10 10 0 0 0 10 10a10 10 0 0 0 10-10A10 10 0 0 0 12 2m-1 15h2v-6h-2z" />\n</svg>\n                          <p class="text-muted">No description available.</p>\n                      </div>'}\n          </div>\n      </div>\n    `),window.commentsManagerInstance&&window.commentsManagerInstance.updateCommentsHeader(),n.html(`\n        <h2 class="season-title display-4 text-custom-header mb-3">Season ${s} / ${e.title}</h2>\n        <div class="season-description-container">\n            <div class="season-dates mb-3">\n               <p class="mb-1"><strong>Start Date:</strong> ${d(a)}</p>\n               <p class="mb-1"><strong>End Date:</strong> ${d(r)}</p>\n               <p class="mb-1"><strong>Duration:</strong> ${i} days</p>\n            </div>\n            <div class="season-description-body text-center"> \n                ${e.description?`<p class="season-description-text">${e.description}</p>`:'\n                        <div class="no-description">\n                           <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24">\n\t<rect width="24" height="24" fill="none" />\n\t<path fill="currentColor" d="M11 9h2V7h-2m1 13c-4.41 0-8-3.59-8-8s3.59 8-8-8m0-18A10 10 0 0 0 2 12a10 10 0 0 0 10 10a10 10 0 0 0 10-10A10 10 0 0 0 12 2m-1 15h2v-6h-2z" />\n</svg>\n                            <p class="text-muted">No description available.</p>\n                        </div>'}\n            </div>\n        </div>\n      `),window.commentsManagerInstance&&window.commentsManagerInstance.updateCommentsHeader(),e.rewards&&e.rewards.length>0){const s=e.rewards.map(((n,s)=>{const e="True"===n.bonus,a=e?'<span class="badge rounded-pill fs-6 fs-md-5" style="background-color: #748D92; color: #212A31">Bonus</span>':"",t=`<span class="badge rounded-pill fs-6 fs-md-5" style="background-color: #124E66; color: #D3D9D4">${n.requirement}</span>`;return`\n              <div class="reward-item ${e?"bonus-reward":""}" style="--animation-order: ${s}">\n                <div class="reward-content">\n                  <h6 class="reward-title">${n.item}</h6>\n                  <div class="reward-badges">\n                    ${a}\n                    ${t}\n                  </div>\n                </div>\n              </div>`})).join("");n.append(`\n          <div class="rewards-container">\n            <h3 class="rewards-title">Season Rewards</h3>\n            <div class="rewards-list">${s}</div>\n          </div>`)}else n.append('<p class="text-warning">No rewards data available.</p>');t()}(s,i),c(i.rewards),r(s),document.title=`Season ${s} - ${i.title}`,!1})).catch((s=>{var e;return console.error("Error loading season details:",s),e="Unable to load season details. Please try again later.",n.html(`\n      <div class="alert alert-danger" role="alert">\n        <h4 class="alert-heading">Error</h4>\n        <p>${e}</p>\n      </div>\n    `),c([]),r("Error"),document.title="Error - Season Details",!1}))}function m(n){return n?{days:Math.floor(n/86400),hours:Math.floor(n%86400/3600),minutes:Math.floor(n%3600/60),seconds:Math.floor(n%60)}:null}function p(n,s,e){if(!s)return;const a=o(s.days),t="next-season-countdown"===n,r=e.includes("submissions close in:"),i=t&&r?'\n      <div class="submission-notice">\n        <a href="https://www.reddit.com/r/JailbreakCreations/comments/1ij9taa/season_25_entries_pixel_arcade/?sort=new" \n           target="_blank" \n           rel="noopener noreferrer" \n           class="btn btn-sm btn-outline-info">\n          <i class="fas fa-external-link-alt me-1"></i>Submit a Creation\n        </a>\n      </div>\n    ':"";$(`#${n}`).html(`\n      <div class="season-countdown">\n        <h3 class="countdown-title">${e}</h3>\n        <div class="countdown-timer">\n          <div class="countdown-item">\n            <span style="color: ${a}">${s.days.toString().padStart(2,"0")}</span>\n            <span class="countdown-label">Days</span>\n          </div>\n          <div class="countdown-item">\n            <span style="color: ${a}">${s.hours.toString().padStart(2,"0")}</span>\n            <span class="countdown-label">Hours</span>\n          </div>\n          <div class="countdown-item">\n            <span style="color: ${a}">${s.minutes.toString().padStart(2,"0")}</span>\n            <span class="countdown-label">Minutes</span>\n          </div>\n          <div class="countdown-item">\n            <span style="color: ${a}">${s.seconds.toString().padStart(2,"0")}</span>\n            <span class="countdown-label">Seconds</span>\n          </div>\n        </div>\n        ${i}\n      </div>\n    `)}$(document).on("click",".season-dropdown-item",(function(n){n.preventDefault();const s=$(this).data("season-id"),e=`/seasons/${s}`;window.history.pushState({},"",e),window.commentsManagerInstance?(window.commentsManagerInstance.clearComments(),window.commentsManagerInstance.type="season",window.commentsManagerInstance.itemId=s,window.commentsManagerInstance.loadComments()):(window.commentsManagerInstance=new CommentsManager("season",s),window.commentsManagerInstance.loadComments()),l(parseInt(s))})),($("#loading-overlay").addClass("show"),i().then((n=>(d(n),setInterval((()=>function(n){const s=Math.floor(Date.now()/1e3),e=n.find((n=>n.season===a)),t=n.find((n=>n.season===a+1));if(e&&e.end_date){const n=parseInt(e.end_date)-s,a=m(n),o=t?"col-12 col-md-6 mb-3":"col-12 col-md-6 mb-3 mx-auto";$("#current-season-countdown").parent().attr("class",o),n<=0?$("#current-season-countdown").html(`\n          <div class="season-ended">\n            <i class="fas fa-clock"></i>Season ${e.season} has ended\n          </div>\n        `):p("current-season-countdown",a,`Season ${e.season} / ${e.title} ends in:`)}const o=$("#next-season-countdown").parent();if(t)if(o.show(),!t.start_date&&t.end_date){const n=parseInt(t.end_date)-s;n<=0?p("next-season-countdown",{days:0,hours:0,minutes:0,seconds:0},`Season ${t.season} / ${t.title} submissions closed`):p("next-season-countdown",m(n),`Season ${t.season} / ${t.title} submissions close in:`)}else p("next-season-countdown",{days:0,hours:0,minutes:0,seconds:0},`Season ${t.season} / ${t.title} submissions closed`);else o.hide()}(n)),1e3),[n,n.find((n=>n.season===a))]))).catch((n=>{throw console.error("Error loading data:",n),t(),n}))).then((([n,s])=>{d(n);const e=window.location.pathname.split("/");let a=e[e.length-1];if(!a||isNaN(a)||!n.some((n=>n.season===parseInt(a)))){a=s.season.toString();const n=`${window.location.origin}/seasons/${a}`;window.history.replaceState({},"",n)}return window.commentsManagerInstance||(window.commentsManagerInstance=new CommentsManager("season",a),window.commentsManagerInstance.loadComments()),l(parseInt(a))})).catch((s=>{console.error("Failed to fetch data:",s),n.html('\n        <div class="alert alert-danger" role="alert">\n          <h4 class="alert-heading">Unable to Load Season Data</h4>\n          <p>We\'re having trouble fetching the season information. Please try refreshing the page or check back later.</p>\n        </div>\n      '),e.html('<li class="w-100"><span class="dropdown-item">No seasons available</span></li>')}))}));