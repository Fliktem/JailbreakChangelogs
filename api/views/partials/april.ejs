<script>
let isRotated = false;
let rainbowInterval;
const konamiCode = ['ArrowUp', 'ArrowUp', 'ArrowDown', 'ArrowDown', 'ArrowLeft', 'ArrowRight', 'ArrowLeft', 'ArrowRight', 'b', 'a'];
let konamiIndex = 0;

function startRainbowEffect() {
    let hue = 0;
    rainbowInterval = setInterval(() => {
        document.body.style.filter = `hue-rotate(${hue}deg)`;
        hue = (hue + 1) % 360;
    }, 50);
}

function stopRainbowEffect() {
    if (rainbowInterval) {
        clearInterval(rainbowInterval);
        document.body.style.filter = 'none';
    }
}

document.addEventListener('keydown', (e) => {
    if (e.key.toLowerCase() === konamiCode[konamiIndex].toLowerCase()) {
        konamiIndex++;
        if (konamiIndex === konamiCode.length) {
            document.body.style.transform = 'rotate(0deg)';
            isRotated = false;
            konamiIndex = 0;
            localStorage.setItem('aprilFoolsFixed', 'true');
            stopRainbowEffect();
            // Remove the help button if it exists
            const helpButton = document.querySelector('#aprilFoolsHelpButton');
            if (helpButton) {
                helpButton.remove();
            }
            alert('You found the secret code! Page restored to normal.');
            // Refresh the page after the alert
            window.location.reload();
        }
    } else {
        konamiIndex = 0;
    }
});

if (new Date().getMonth() === 3 && new Date().getDate() === 1 && localStorage.getItem('aprilFoolsFixed') !== 'true') {
    // Initial rotation
    document.body.style.transform = 'rotate(180deg)';
    isRotated = true;

    // Start rainbow effect
    startRainbowEffect();

    // Add bounce animation to all images
    document.querySelectorAll('img').forEach(img => {
        img.style.animation = 'bounce 1s infinite';
    });

    // Add CSS for bounce animation
    const style = document.createElement('style');
    style.textContent = `
        @keyframes bounce {
            0%, 100% { transform: translateY(0); }
            50% { transform: translateY(-10px); }
        }
        @keyframes wobble {
            0%, 100% { transform: rotate(-3deg); }
            50% { transform: rotate(3deg); }
        }
    `;
    document.head.appendChild(style);

    // Make headings wobble
    document.querySelectorAll('h1, h2, h3, h4, h5, h6').forEach(heading => {
        heading.style.animation = 'wobble 2s infinite';
        heading.style.display = 'inline-block';
    });

    const prankButton = document.createElement('button');
    prankButton.id = 'aprilFoolsHelpButton';
    prankButton.innerHTML = 'Help! The page is upside down!';
    prankButton.style.position = 'fixed';
    prankButton.style.bottom = '20px';
    prankButton.style.right = '20px';
    prankButton.style.zIndex = '9999';
    prankButton.style.padding = '15px';
    prankButton.style.transform = 'rotate(180deg)';
    prankButton.style.backgroundColor = 'var(--accent-color)';
    prankButton.style.color = 'var(--text-primary)';
    prankButton.style.border = '1px solid var(--accent-color-light)';
    prankButton.style.cursor = 'pointer';
    prankButton.style.fontWeight = 'bold';

    prankButton.onmouseover = () => {
        prankButton.style.backgroundColor = 'var(--accent-color-light)';
    };
    prankButton.onmouseout = () => {
        prankButton.style.backgroundColor = 'var(--accent-color)';
    };

    prankButton.onclick = () => {
        if (isRotated) {
            // Play the "Get out" sound
            const audio = new Audio('/assets/audios/april/Get out.mp3');
            audio.play();

            const modal = document.createElement('div');
            modal.style.position = 'fixed';
            modal.style.top = '82%'; // Moving it higher up
            modal.style.left = '50%';
            modal.style.transform = 'translate(-50%, -50%) rotate(180deg)';
            modal.style.backgroundColor = 'var(--bg-primary)';
            modal.style.color = 'var(--text-primary)';
            modal.style.padding = '30px';
            modal.style.border = '2px solid var(--accent-color)';
            modal.style.zIndex = '10000';
            modal.style.borderRadius = '10px';
            modal.style.textAlign = 'center';
            modal.style.maxWidth = '400px';
            modal.style.boxShadow = '0 4px 15px rgba(0, 0, 0, 0.2)';
            
            modal.innerHTML = `
                <h3 style="margin-bottom: 15px">Happy April Fools! ü§°</h3>
                <p>Enter the famous <strong>Konami Code</strong>:</p>
                <div id="konamiControls" style="margin: 20px auto; width: 150px;">
                    <button id="upBtn" style="width: 50px; height: 50px; margin: 2px;">‚Üë</button><br>
                    <button id="leftBtn" style="width: 50px; height: 50px; margin: 2px;">‚Üê</button>
                    <button id="rightBtn" style="width: 50px; height: 50px; margin: 2px;">‚Üí</button><br>
                    <button id="downBtn" style="width: 50px; height: 50px; margin: 2px;">‚Üì</button><br>
                    <button id="bBtn" style="width: 50px; height: 50px; margin: 2px;">B</button>
                    <button id="aBtn" style="width: 50px; height: 50px; margin: 2px;">A</button>
                </div>
                <p style="font-size: 0.9em">Use these buttons or keyboard keys to enter the code!</p>
            `;

            // Add control handlers for all users
            const buttons = {
                'upBtn': 'ArrowUp',
                'downBtn': 'ArrowDown',
                'leftBtn': 'ArrowLeft',
                'rightBtn': 'ArrowRight',
                'bBtn': 'b',
                'aBtn': 'a'
            };

            Object.entries(buttons).forEach(([btnId, key]) => {
                const btn = modal.querySelector('#' + btnId);
                if (btn) {
                    btn.onclick = (e) => {
                        e.stopPropagation(); // Prevent modal from closing
                        const event = new KeyboardEvent('keydown', { key: key.toLowerCase() });
                        document.dispatchEvent(event);
                        
                        // Visual feedback
                        btn.style.backgroundColor = 'var(--accent-color-light)';
                        setTimeout(() => {
                            btn.style.backgroundColor = 'var(--accent-color)';
                        }, 100);
                    };
                    // Style the buttons
                    btn.style.backgroundColor = 'var(--accent-color)';
                    btn.style.color = 'var(--text-primary)';
                    btn.style.border = '1px solid var(--accent-color-light)';
                    btn.style.borderRadius = '5px';
                    btn.style.cursor = 'pointer';
                    btn.style.fontSize = '20px';
                    btn.style.transition = 'background-color 0.1s';
                }
            });

            // Close modal when clicking outside of controls
            modal.onclick = (e) => {
                if (e.target === modal) {
                    modal.remove();
                }
            };

            document.body.appendChild(modal);

            // Auto-remove after timeout
            setTimeout(() => {
                if (document.body.contains(modal)) {
                    modal.remove();
                }
            }, 60000); // 1 minute
        }
    };

    document.body.appendChild(prankButton);
}
</script>